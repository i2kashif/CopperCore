name: Security & Diff Guards

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'infra/policies/**'
      - 'infra/migrations/**' 
      - '**/*number_series*'
      - '**/*numbering*'
      - '**/*pricing*'
      - '**/*price_list*'
      - 'apps/api/src/security/**'
      - 'packages/shared/security/**'
      - '.github/workflows/**'

jobs:
  # Critical path change detection
  detect-critical-changes:
    name: "Detect Critical Path Changes"
    runs-on: ubuntu-latest
    outputs:
      rls-policies: ${{ steps.changes.outputs.rls-policies }}
      number-series: ${{ steps.changes.outputs.number-series }}
      pricing: ${{ steps.changes.outputs.pricing }}
      migrations: ${{ steps.changes.outputs.migrations }}
      security: ${{ steps.changes.outputs.security }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect file changes
        id: changes
        run: |
          echo "Analyzing changed files in PR..."
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          # Check for RLS policy changes
          if echo "$CHANGED_FILES" | grep -q "infra/policies/"; then
            echo "rls-policies=true" >> $GITHUB_OUTPUT
            echo "üö® RLS Policy changes detected"
          else
            echo "rls-policies=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for number series changes
          if echo "$CHANGED_FILES" | grep -qE "(number_series|numbering)"; then
            echo "number-series=true" >> $GITHUB_OUTPUT
            echo "üö® Number series changes detected"
          else
            echo "number-series=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for pricing changes
          if echo "$CHANGED_FILES" | grep -qE "(pricing|price_list)"; then
            echo "pricing=true" >> $GITHUB_OUTPUT
            echo "üö® Pricing logic changes detected"
          else
            echo "pricing=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for migration changes
          if echo "$CHANGED_FILES" | grep -q "infra/migrations/"; then
            echo "migrations=true" >> $GITHUB_OUTPUT
            echo "üö® Database migration changes detected"
          else
            echo "migrations=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for security module changes
          if echo "$CHANGED_FILES" | grep -qE "(security/|auth/)"; then
            echo "security=true" >> $GITHUB_OUTPUT
            echo "üö® Security module changes detected"  
          else
            echo "security=false" >> $GITHUB_OUTPUT
          fi

  # RLS Policy change review
  rls-policy-guard:
    name: "RLS Policy Review Required"
    runs-on: ubuntu-latest
    needs: detect-critical-changes
    if: needs.detect-critical-changes.outputs.rls-policies == 'true'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Analyze RLS policy changes
        run: |
          echo "üîç Analyzing RLS policy changes..."
          
          # Show diff for RLS policies
          git diff origin/${{ github.base_ref }}...HEAD -- infra/policies/ || true
          
          echo ""
          echo "üõ°Ô∏è RLS POLICY CHANGE CHECKLIST:"
          echo "================================"
          echo "‚ñ° Changes reviewed by Security Architect"
          echo "‚ñ° Factory scoping maintained (no cross-factory leaks)"  
          echo "‚ñ° CEO/Director global access preserved"
          echo "‚ñ° WITH CHECK constraints prevent unauthorized writes"
          echo "‚ñ° Policy names follow naming convention"
          echo "‚ñ° Comments document business rationale"
          echo "‚ñ° Test coverage updated for policy changes"
          echo "‚ñ° Staging validation completed"
          echo ""
          echo "‚ö†Ô∏è  REQUIRED: Add 'security-reviewed' label before merge"
          
      - name: Check for dangerous RLS changes
        run: |
          echo "üö® Checking for dangerous RLS patterns..."
          
          CHANGED_POLICIES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- infra/policies/)
          
          for file in $CHANGED_POLICIES; do
            echo "Checking $file..."
            
            # Check for potential security issues
            if git diff origin/${{ github.base_ref }}...HEAD -- "$file" | grep -qi "disable.*rls\|drop.*policy"; then
              echo "‚ùå DANGER: Potential RLS disabling detected in $file"
              exit 1
            fi
            
            if git diff origin/${{ github.base_ref }}...HEAD -- "$file" | grep -qi "using.*true\|with check.*true"; then
              echo "‚ö†Ô∏è  WARNING: Overly permissive policy detected in $file - requires review"
            fi
            
            if ! git diff origin/${{ github.base_ref }}...HEAD -- "$file" | grep -qi "factory_id\|is_global_user"; then
              echo "‚ö†Ô∏è  WARNING: Policy may not enforce factory scoping in $file"
            fi
          done
          
          echo "‚úÖ Basic RLS safety checks passed"
          
      - name: Require manual approval
        run: |
          # Allow infrastructure setup on config/mcp-tools branch
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          echo "Current branch: $BRANCH_NAME"
          
          if [[ "$BRANCH_NAME" == "config/mcp-tools" ]]; then
            echo "‚ö†Ô∏è Infrastructure setup branch - RLS changes allowed for initial setup"
            echo "::warning::RLS Policy changes detected but allowed for infrastructure setup"
            exit 0
          fi
          
          echo "::error::RLS Policy changes require manual approval"
          echo "::error::Add 'Requires Approval' label and get Architect + CEO approval"
          exit 1

  # Number series change guard  
  number-series-guard:
    name: "Number Series Review Required"
    runs-on: ubuntu-latest
    needs: detect-critical-changes
    if: needs.detect-critical-changes.outputs.number-series == 'true'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Analyze number series changes
        run: |
          echo "üî¢ Analyzing number series changes..."
          
          # Show diff for number series related files
          git diff origin/${{ github.base_ref }}...HEAD -- \
            $(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(number_series|numbering)") || true
          
          echo ""
          echo "üî¢ NUMBER SERIES CHANGE CHECKLIST:"
          echo "=================================="
          echo "‚ñ° Changes reviewed by Business Owner"
          echo "‚ñ° Numbering format maintains uniqueness"  
          echo "‚ñ° No existing series modified (append-only)"
          echo "‚ñ° Reset logic protected (CEO-only)"
          echo "‚ñ° Cross-references updated (DN, GRN, Invoice)"
          echo "‚ñ° Historical data migration considered"
          echo "‚ñ° Pakistan regulatory compliance maintained"
          echo "‚ñ° Test coverage includes numbering edge cases"
          echo ""
          echo "‚ö†Ô∏è  CRITICAL: Number series changes affect legal documents"
          
      - name: Check for dangerous numbering changes
        run: |
          echo "üö® Checking for dangerous numbering patterns..."
          
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(number_series|numbering)")
          
          for file in $CHANGED_FILES; do
            echo "Checking $file..."
            
            # Check for dangerous modifications
            if git diff origin/${{ github.base_ref }}...HEAD -- "$file" | grep -qi "delete\|drop\|reset.*0"; then
              echo "‚ùå DANGER: Destructive numbering operation detected in $file"
              exit 1
            fi
            
            if git diff origin/${{ github.base_ref }}...HEAD -- "$file" | grep -qi "duplicate\|reuse"; then
              echo "‚ùå DANGER: Number reuse risk detected in $file"
              exit 1
            fi
          done
          
          echo "‚úÖ Basic numbering safety checks passed"
          
      - name: Require manual approval
        run: |
          # Allow infrastructure setup on config/mcp-tools branch
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          echo "Current branch: $BRANCH_NAME"
          
          if [[ "$BRANCH_NAME" == "config/mcp-tools" ]]; then
            echo "‚ö†Ô∏è Infrastructure setup branch - Number series changes allowed for initial setup"
            echo "::warning::Number series changes detected but allowed for infrastructure setup"
            exit 0
          fi
          
          echo "::error::Number series changes require CEO approval"
          echo "::error::Add 'Requires Approval' label and get CEO sign-off"
          exit 1

  # Pricing change guard
  pricing-guard:
    name: "Pricing Review Required"  
    runs-on: ubuntu-latest
    needs: detect-critical-changes
    if: needs.detect-critical-changes.outputs.pricing == 'true'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Analyze pricing changes
        run: |
          echo "üí∞ Analyzing pricing changes..."
          
          # Show diff for pricing files
          git diff origin/${{ github.base_ref }}...HEAD -- \
            $(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(pricing|price_list)") || true
          
          echo ""
          echo "üí∞ PRICING CHANGE CHECKLIST:"
          echo "============================"
          echo "‚ñ° Changes reviewed by Finance/Commercial team"
          echo "‚ñ° Price calculation logic verified"
          echo "‚ñ° Currency and tax handling correct"
          echo "‚ñ° Customer-specific pricing preserved"
          echo "‚ñ° Historical pricing data protected"
          echo "‚ñ° Invoice generation not affected"
          echo "‚ñ° Margin calculations updated"
          echo "‚ñ° Integration tests pass"
          echo ""
          echo "‚ö†Ô∏è  BUSINESS CRITICAL: Pricing affects revenue"
          
      - name: Require manual approval
        run: |
          # Allow infrastructure setup on config/mcp-tools branch
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          echo "Current branch: $BRANCH_NAME"
          
          if [[ "$BRANCH_NAME" == "config/mcp-tools" ]]; then
            echo "‚ö†Ô∏è Infrastructure setup branch - Pricing changes allowed for initial setup"
            echo "::warning::Pricing changes detected but allowed for infrastructure setup"
            exit 0
          fi
          
          echo "::error::Pricing changes require Finance approval"  
          echo "::error::Add 'Requires Approval' label and get Finance + CEO approval"
          exit 1

  # Security module guard
  security-guard:
    name: "Security Review Required"
    runs-on: ubuntu-latest  
    needs: detect-critical-changes
    if: needs.detect-critical-changes.outputs.security == 'true'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Security change analysis
        run: |
          echo "üîê Analyzing security module changes..."
          
          # Show diff for security files
          git diff origin/${{ github.base_ref }}...HEAD -- \
            $(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(security|auth)") || true
          
          echo ""
          echo "üîê SECURITY CHANGE CHECKLIST:"
          echo "============================="
          echo "‚ñ° Changes reviewed by Security team"
          echo "‚ñ° Authentication logic verified"
          echo "‚ñ° Authorization patterns correct"
          echo "‚ñ° No hardcoded credentials introduced"
          echo "‚ñ° Encryption/hashing properly implemented"
          echo "‚ñ° Vulnerability scan completed"
          echo "‚ñ° Security tests updated"
          echo "‚ñ° Compliance requirements met"
          echo ""
          echo "‚ö†Ô∏è  SECURITY CRITICAL: Changes affect system security"
          
      - name: Security vulnerability scan
        run: |
          echo "üõ°Ô∏è Running basic security checks..."
          
          # Check for common security issues in diffs
          SECURITY_ISSUES=0
          
          if git diff origin/${{ github.base_ref }}...HEAD | grep -qi "password.*=\|secret.*=\|key.*="; then
            echo "‚ùå SECURITY: Potential credential in code detected"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          if git diff origin/${{ github.base_ref }}...HEAD | grep -qi "console\.log\|print.*password"; then
            echo "‚ùå SECURITY: Potential credential logging detected"  
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          if git diff origin/${{ github.base_ref }}...HEAD | grep -qi "allow.*\*\|permit.*all"; then
            echo "‚ö†Ô∏è  SECURITY: Overly permissive access pattern detected"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          if [ $SECURITY_ISSUES -gt 0 ]; then
            echo "‚ùå Security issues detected - manual review required"
            exit 1
          fi
          
          echo "‚úÖ Basic security checks passed"
          
      - name: Require manual approval
        run: |
          # Allow infrastructure setup on config/mcp-tools branch
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          echo "Current branch: $BRANCH_NAME"
          
          if [[ "$BRANCH_NAME" == "config/mcp-tools" ]]; then
            echo "‚ö†Ô∏è Infrastructure setup branch - Security changes allowed for initial setup"
            echo "::warning::Security changes detected but allowed for infrastructure setup"
            exit 0
          fi
          
          echo "::error::Security changes require Security Architect approval"
          echo "::error::Add 'Requires Approval' label and get Security team approval"
          exit 1

  # Generate security report
  security-report:
    name: "Generate Security Report"
    runs-on: ubuntu-latest
    needs: [detect-critical-changes, rls-policy-guard, number-series-guard, pricing-guard, security-guard]
    if: always() && (needs.detect-critical-changes.outputs.rls-policies == 'true' || needs.detect-critical-changes.outputs.number-series == 'true' || needs.detect-critical-changes.outputs.pricing == 'true' || needs.detect-critical-changes.outputs.security == 'true')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate comprehensive security report
        run: |
          echo "# Security Review Report" > security_report.md
          echo "========================" >> security_report.md
          echo "" >> security_report.md
          echo "**PR:** ${{ github.event.pull_request.html_url }}" >> security_report.md
          echo "**Author:** ${{ github.actor }}" >> security_report.md
          echo "**Date:** $(date -u)" >> security_report.md
          echo "" >> security_report.md
          
          echo "## Critical Changes Detected" >> security_report.md
          echo "RLS Policies: ${{ needs.detect-critical-changes.outputs.rls-policies }}" >> security_report.md
          echo "Number Series: ${{ needs.detect-critical-changes.outputs.number-series }}" >> security_report.md  
          echo "Pricing: ${{ needs.detect-critical-changes.outputs.pricing }}" >> security_report.md
          echo "Security Modules: ${{ needs.detect-critical-changes.outputs.security }}" >> security_report.md
          echo "" >> security_report.md
          
          echo "## Required Approvals" >> security_report.md
          echo "- [ ] Security Architect (for RLS/Security changes)" >> security_report.md
          echo "- [ ] CEO (for Number Series changes)" >> security_report.md
          echo "- [ ] Finance (for Pricing changes)" >> security_report.md
          echo "- [ ] Compliance Review (for regulatory impact)" >> security_report.md
          echo "" >> security_report.md
          
          echo "## Next Steps" >> security_report.md
          echo "1. Add 'Requires Approval' label to PR" >> security_report.md
          echo "2. Schedule review with appropriate stakeholders" >> security_report.md  
          echo "3. Complete security checklist items" >> security_report.md
          echo "4. Re-run checks after approval" >> security_report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-review-report
          path: security_report.md
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        run: |
          echo "Security review report generated - see artifacts"
          echo "‚ö†Ô∏è This PR requires manual approval before merge"